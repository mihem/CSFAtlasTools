[{"path":"https://mihem.github.io/CSFAtlasTools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 CSFAtlasTools authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Heming. Author, maintainer.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Heming M (2024). CSFAtlasTools: Helper functions CSF Immune Atlas analysis. R package version 2.0.0, https://github.com/mihem/CSFAtlasTools.","code":"@Manual{,   title = {CSFAtlasTools: Helper functions for the CSF Immune Atlas analysis},   author = {Michael Heming},   year = {2024},   note = {R package version 2.0.0},   url = {https://github.com/mihem/CSFAtlasTools}, }"},{"path":"https://mihem.github.io/CSFAtlasTools/index.html","id":"csf-atlas-tools","dir":"","previous_headings":"","what":"Helper functions for the CSF Immune Atlas analysis","title":"Helper functions for the CSF Immune Atlas analysis","text":"repository contains helper function analysis cerebrospinal fluid immune cells. code used manuscript “Atlas cerebrospinal fluid immune cells across neurological diseases”. analysis can found : CSF Atlas Code","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Helper functions for the CSF Immune Atlas analysis","text":"install package, use:","code":"remotes::install_github(\"mihem/CSFAtlasTools\")"},{"path":"https://mihem.github.io/CSFAtlasTools/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Helper functions for the CSF Immune Atlas analysis","text":"questions, please contact via mheming.de.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/abundanceCategoryPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"the abundance of each gene in a cluster as a barplot. — abundanceCategoryPlot","title":"the abundance of each gene in a cluster as a barplot. — abundanceCategoryPlot","text":"abundance gene cluster barplot.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/abundanceCategoryPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"the abundance of each gene in a cluster as a barplot. — abundanceCategoryPlot","text":"","code":"abundanceCategoryPlot(data, cluster, output_dir)"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/abundanceCategoryPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"the abundance of each gene in a cluster as a barplot. — abundanceCategoryPlot","text":"data dataframe gene names, q-values TF-IDF values. cluster cluster plot. output_dir directory save plot.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/abundanceCategoryPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"the abundance of each gene in a cluster as a barplot. — abundanceCategoryPlot","text":"ggplot2 plot saved output_dir","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/abundanceCategoryPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"the abundance of each gene in a cluster as a barplot. — abundanceCategoryPlot","text":"","code":"data <- data.frame(     gene = c(\"Gene1\", \"Gene2\", \"Gene3\"),     qval = c(0.01, 0.05, 0.001),     tfidf = c(0.8, 0.6, 0.9),     cluster = c(\"Cluster1\", \"Cluster1\", \"Cluster1\") )  # Define the cluster and output directory cluster <- \"Cluster1\" output_dir <- tempdir()  # Call the abundanceCategoryPlot function abundanceCategoryPlot(data, cluster, output_dir)"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/boxplot_cluster_manual.html","id":null,"dir":"Reference","previous_headings":"","what":"Boxplot Cluster Manual — boxplot_cluster_manual","title":"Boxplot Cluster Manual — boxplot_cluster_manual","text":"function creates boxplot given test name cluster, saves plot specified directory.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/boxplot_cluster_manual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boxplot Cluster Manual — boxplot_cluster_manual","text":"","code":"boxplot_cluster_manual(data, test_name, file_name, output_dir)"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/boxplot_cluster_manual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boxplot Cluster Manual — boxplot_cluster_manual","text":"data data frame containing data. test_name character string representing test name plotted. file_name character string representing file name saving plot. output_dir character string representing directory save plot.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/boxplot_cluster_manual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boxplot Cluster Manual — boxplot_cluster_manual","text":"None. function saves plot file.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/boxplot_cluster_manual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boxplot Cluster Manual — boxplot_cluster_manual","text":"","code":"set.seed(1) data <- data.frame(     cluster = rep(letters[1:2], each = 50),     test1 = c(stats::rnorm(50, mean = 1, sd = 1), stats::rnorm(50, mean = 2, sd = 1)),     test2 = stats::rnorm(100, mean = 2, sd = 1) ) test_name <- \"test1\" file_name <- \"example\" output_dir <- tempdir()  # Call the boxplot_cluster_manual function boxplot_cluster_manual(data, test_name, file_name, output_dir)"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/compBoxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare via boxplots — compBoxplot","title":"Compare via boxplots — compBoxplot","text":"function creates boxplot compare parameter groups.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/compBoxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare via boxplots — compBoxplot","text":"","code":"compBoxplot(par, df)"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/compBoxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare via boxplots — compBoxplot","text":"par character string representing parameter plotted. df data frame containing data plotting.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/compBoxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare via boxplots — compBoxplot","text":"ggplot2 plot.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/compBoxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare via boxplots — compBoxplot","text":"","code":"par <- \"example_par\" df <- data.frame(     group = c(\"group1\", \"group1\", \"group1\", \"group2\", \"group2\", \"group2\"),     example_par = c(3, 7, 8, 5, 9, 6) ) compBoxplot(par, df)"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/compSex.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Variables Between Sex — compSex","title":"Compare Variables Between Sex — compSex","text":"function creates boxplot compare variable sexes saves plot specified directory.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/compSex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Variables Between Sex — compSex","text":"","code":"compSex(var, estimate_df, plot_df, output_dir)"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/compSex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Variables Between Sex — compSex","text":"var character string representing variable plotted. estimate_df data frame containing estimates. plot_df data frame containing data plotting. output_dir character string representing directory save plot.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/compSex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Variables Between Sex — compSex","text":"ggplot2 plot saved output_dir.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/compSex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Variables Between Sex — compSex","text":"","code":"var <- \"example_var\" estimate_df <- data.frame(     var = rep(\"example_var\", 6),     sex = c(\"M\", \"F\", \"M\", \"F\", \"M\", \"F\"),     akp_effect = c(0.5, -0.6, 0.7, -0.8, 0.9, -1.0),     p_adjust = c(0.01, 0.02, 0.03, 0.04, 0.05, 0.06) ) plot_df <- data.frame(     sex = c(\"M\", \"F\", \"M\", \"F\", \"M\", \"F\"),     example_var = c(1, 9, 6, 5, 4, 3) ) output_dir <- tempdir() compSex(var, estimate_df, plot_df, output_dir)"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/corrPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Individual correlation plots of variables — corrPlot","title":"Individual correlation plots of variables — corrPlot","text":"Create individual correlation plots selected variables","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/corrPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Individual correlation plots of variables — corrPlot","text":"","code":"corrPlot(var, estimate_df, plot_df, output_dir)"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/corrPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Individual correlation plots of variables — corrPlot","text":"var character string representing variable estimate_df data frame containing estimates plot_df data frame containing plot output_dir character string representing directory save plot.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/corrPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Individual correlation plots of variables — corrPlot","text":"ggplot2 plot saved output_dir","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/corrPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Individual correlation plots of variables — corrPlot","text":"","code":"var <- \"example_var\" estimate_df <- data.frame(     var = c(\"example_var\", \"example_var\", \"example_var\"),     age = c(20, 30, 40),     estimate = c(0.5, 0.6, 0.7),     p_adjust = c(0.01, 0.02, 0.03) ) plot_df <- data.frame(     age = c(20, 30, 40),     example_var = c(1, 2, 3) ) output_dir <- tempdir() corrPlot(var, estimate_df, plot_df, output_dir) #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/count_category.html","id":null,"dir":"Reference","previous_headings":"","what":"Count categories — count_category","title":"Count categories — count_category","text":"count categories save csv","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/count_category.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count categories — count_category","text":"","code":"count_category(data, category, output_dir)"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/count_category.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count categories — count_category","text":"data data frame category character string representing category output_dir character string representing output directory","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/count_category.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count categories — count_category","text":"save categories folder /analysis/relative/categories/","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/count_category.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count categories — count_category","text":"","code":"df <- data.frame(   category = c(\"A\", \"B\", \"A\", \"C\", \"B\", \"A\"),   value = 1:6 )  temp_dir <- tempdir()  count_category(df, \"category\", temp_dir)"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/date_distance_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the distance between two dates — date_distance_fun","title":"Calculate the distance between two dates — date_distance_fun","text":"Calculate absolute difference two dates days","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/date_distance_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the distance between two dates — date_distance_fun","text":"","code":"date_distance_fun(v1, v2, max_dist = 1)"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/date_distance_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the distance between two dates — date_distance_fun","text":"v1 first date v2 second date max_dist maximum distance days two dates","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/date_distance_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the distance between two dates — date_distance_fun","text":"data frame single column include indicating whether distance within maximum distance","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/lm_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear model for age — lm_age","title":"Linear model for age — lm_age","text":"Create linear model single predictor age given variable","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/lm_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear model for age — lm_age","text":"","code":"lm_age(data, variable)"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/lm_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear model for age — lm_age","text":"data data frame variable character string name column data frame","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/lm_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear model for age — lm_age","text":"tidy tibble estimate, standard error, statistic, p.value age term","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/plotConfMat.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot confusion matrix — plotConfMat","title":"Plot confusion matrix — plotConfMat","text":"function plots confusion matrix tuned xgboost model.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/plotConfMat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot confusion matrix — plotConfMat","text":"","code":"plotConfMat(last_fit, name, metric_df, output_dir)"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/plotConfMat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot confusion matrix — plotConfMat","text":"last_fit last fit tuning process. name character string name model. metric_df data frame containing metric output_dir directory save plot.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/plotConfMat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot confusion matrix — plotConfMat","text":"ggplot2 object.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/plotConfMat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot confusion matrix — plotConfMat","text":"","code":"set.seed(12) mtcars$cluster <- as.character(mtcars$am) folds <- rsample::vfold_cv(mtcars, v = 2) rec <- recipes::recipe(cluster ~ ., data = mtcars) mod <- parsnip::logistic_reg() control <- tune::control_resamples(save_pred = TRUE) metrics <- yardstick::metric_set(     yardstick::accuracy,     yardstick::bal_accuracy,     yardstick::f_meas,     yardstick::roc_auc ) res <- tune::fit_resamples(mod, rec, folds, control = control, metrics = metrics) metric_df <- tune::collect_metrics(res) metric_df$.estimate <- metric_df$mean plotConfMat(res, name = \"model\", output_dir = tempdir(), metric_df = metric_df) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale."},{"path":"https://mihem.github.io/CSFAtlasTools/reference/scale_this.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale a variable — scale_this","title":"Scale a variable — scale_this","text":"Scale variable subtracting mean dividing standard deviation","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/scale_this.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale a variable — scale_this","text":"","code":"scale_this(x)"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/scale_this.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale a variable — scale_this","text":"x numeric vector","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/scale_this.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale a variable — scale_this","text":"numeric vector length x","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/scale_this.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale a variable — scale_this","text":"","code":"scale_this(1:10) #>  [1] -1.4863011 -1.1560120 -0.8257228 -0.4954337 -0.1651446  0.1651446 #>  [7]  0.4954337  0.8257228  1.1560120  1.4863011"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/stabilityBlood.html","id":null,"dir":"Reference","previous_headings":"","what":"Stability metric for Blood — stabilityBlood","title":"Stability metric for Blood — stabilityBlood","text":"function calculates stability Seurat clustering different resolutions blood data.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/stabilityBlood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stability metric for Blood — stabilityBlood","text":"","code":"stabilityBlood(t, df, vars_cont, normal_estimate, ndim)"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/stabilityBlood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stability metric for Blood — stabilityBlood","text":"t seed number reproducibility. df data frame containing data testing. vars_cont Continuous variables datathin. normal_estimate Estimates normally distributed parameters datathin. ndim Number dimensions Seurat.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/stabilityBlood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stability metric for Blood — stabilityBlood","text":"named vector stability values.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/stabilityBlood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stability metric for Blood — stabilityBlood","text":"","code":"set.seed(1) df <- data.frame(     a = stats::rnorm(100, mean = 2, sd = 1),     b = stats::rnorm(100, mean = 2, sd = 2),     c = stats::rnorm(100, mean = 2, sd = 1),     d = stats::rnorm(100, mean = 2, sd = 2),     e = stats::rnorm(100, mean = 2, sd = 1) ) vars_cont <- c(\"a\", \"b\", \"c\", \"d\", \"e\") normal_estimate <-     matrix(c(0.5, 0.1, 0.7, 0.2, 0.3),         nrow = nrow(df),         ncol = length(vars_cont)     ) ndim <- 2 stabilityBlood(     t = 1,     df = df,     vars_cont = vars_cont,     normal_estimate = normal_estimate,     ndim = ndim ) #> Registered S3 method overwritten by 'spatstat.geom': #>   method       from      #>   print.metric yardstick #> Warning: Data is of class matrix. Coercing to dgCMatrix. #> Warning: Data is of class matrix. Coercing to dgCMatrix. #> Finding variable features for layer counts #> Warning: span too small.   fewer data values than degrees of freedom. #> Warning: at  -0.033995 #> Warning: radius  1.0129e-07 #> Warning: all data on boundary of neighborhood. make span bigger #> Warning: pseudoinverse used at -0.033995 #> Warning: neighborhood radius 0.00031826 #> Warning: reciprocal condition number  1 #> Warning: at  0.030293 #> Warning: radius  1.0129e-07 #> Warning: all data on boundary of neighborhood. make span bigger #> Warning: There are other near singularities as well. 1.0129e-07 #> Warning: zero-width neighborhood. make span bigger #> Warning: zero-width neighborhood. make span bigger #> Warning: zero-width neighborhood. make span bigger #> Warning: zero-width neighborhood. make span bigger #> Warning: zero-width neighborhood. make span bigger #> Centering and scaling data matrix #> Warning: You're computing too large a percentage of total singular values, use a standard svd instead. #> Warning: Only 4 dimensions have been computed. #> Warning: Requested number is larger than the number of available items (5). Setting to 5. #> Warning: Requested number is larger than the number of available items (5). Setting to 5. #> Warning: Requested number is larger than the number of available items (5). Setting to 5. #> Warning: Requested number is larger than the number of available items (5). Setting to 5. #> PC_ 1  #> Positive:  Feature3, Feature4  #> Negative:  Feature2, Feature5  #> PC_ 2  #> Positive:  Feature5, Feature1  #> Negative:  Feature4, Feature3  #> PC_ 3  #> Positive:  Feature2, Feature4  #> Negative:  Feature1, Feature3  #> PC_ 4  #> Positive:  Feature3, Feature2  #> Negative:  Feature5, Feature4  #> Computing nearest neighbor graph #> Computing SNN #> Finding variable features for layer counts #> Warning: span too small.   fewer data values than degrees of freedom. #> Warning: at  -0.0027889 #> Warning: radius  1.7559e-08 #> Warning: all data on boundary of neighborhood. make span bigger #> Warning: pseudoinverse used at -0.0027889 #> Warning: neighborhood radius 0.00013251 #> Warning: reciprocal condition number  1 #> Warning: at  0.023978 #> Warning: radius  1.7559e-08 #> Warning: all data on boundary of neighborhood. make span bigger #> Warning: There are other near singularities as well. 1.7559e-08 #> Warning: zero-width neighborhood. make span bigger #> Warning: zero-width neighborhood. make span bigger #> Warning: zero-width neighborhood. make span bigger #> Warning: zero-width neighborhood. make span bigger #> Warning: zero-width neighborhood. make span bigger #> Centering and scaling data matrix #> Warning: You're computing too large a percentage of total singular values, use a standard svd instead. #> Warning: Only 4 dimensions have been computed. #> Warning: Requested number is larger than the number of available items (5). Setting to 5. #> Warning: Requested number is larger than the number of available items (5). Setting to 5. #> Warning: Requested number is larger than the number of available items (5). Setting to 5. #> Warning: Requested number is larger than the number of available items (5). Setting to 5. #> PC_ 1  #> Positive:  Feature4, Feature1  #> Negative:  Feature2, Feature5  #> PC_ 2  #> Positive:  Feature1, Feature5  #> Negative:  Feature3, Feature4  #> PC_ 3  #> Positive:  Feature4, Feature1  #> Negative:  Feature2, Feature3  #> PC_ 4  #> Positive:  Feature4, Feature5  #> Negative:  Feature3, Feature1  #> Computing nearest neighbor graph #> Computing SNN #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2309 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.8000 #> Number of communities: 1 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2309 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.7103 #> Number of communities: 2 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2309 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.6573 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2309 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.6239 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2309 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.5906 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2309 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.5572 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2309 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.5238 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2309 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.4905 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2309 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.4571 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2309 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.4238 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2309 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.3904 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2327 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.8000 #> Number of communities: 1 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2327 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.7000 #> Number of communities: 1 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2327 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.6384 #> Number of communities: 2 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2327 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.5890 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2327 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.5528 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2327 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.5166 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2327 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.4804 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2327 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.4492 #> Number of communities: 4 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2327 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.4226 #> Number of communities: 4 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2327 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.3962 #> Number of communities: 4 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2327 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.3703 #> Number of communities: 4 #> Elapsed time: 0 seconds #> RNA_snn_res.0.2 RNA_snn_res.0.3 RNA_snn_res.0.4 RNA_snn_res.0.5 RNA_snn_res.0.6  #>      1.00000000      0.00000000      0.11392504      0.08479700      0.08479700  #> RNA_snn_res.0.7 RNA_snn_res.0.8 RNA_snn_res.0.9   RNA_snn_res.1 RNA_snn_res.1.1  #>      0.08479700      0.08479700      0.08642228      0.08642228      0.08118260  #> RNA_snn_res.1.2  #>      0.08118260"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/stabilityCSF.html","id":null,"dir":"Reference","previous_headings":"","what":"Stability metric for CSF — stabilityCSF","title":"Stability metric for CSF — stabilityCSF","text":"function calculates stability Seurat clustering different resolutions.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/stabilityCSF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stability metric for CSF — stabilityCSF","text":"","code":"stabilityCSF(   t,   df,   vars_cont,   vars_cat,   normal_estimate,   weibull_estimate,   ndim )"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/stabilityCSF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stability metric for CSF — stabilityCSF","text":"t seed number reproducibility. df data frame containing data testing. vars_cont Continuous variables datathin. vars_cat Categorical variables datathin. normal_estimate Estimates normally distributed parameters datathin. weibull_estimate Estimates weibull distributed parameters datathin. ndim Number dimensions Seurat","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/stabilityCSF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stability metric for CSF — stabilityCSF","text":"named vector stability values.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/stabilityCSF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stability metric for CSF — stabilityCSF","text":"","code":"set.seed(1) df <- data.frame(     a = rnorm(100, mean = 2, sd = 1),     b = rnorm(100, mean = 2, sd = 1),     x = rpois(100, lambda = 2),     y = rpois(100, lambda = 2),     z = rpois(100, lambda = 2) ) vars_cont <- c(\"a\", \"b\") vars_cat <- c(\"x\", \"y\", \"z\") normal_estimate <-     matrix(c(0.5, 0.2),         nrow = nrow(df),         ncol = length(vars_cont)     ) weibull_estimate <-     matrix(c(0.5, 0.2, 0.7),         nrow = nrow(df),         ncol = length(vars_cat)     ) ndim <- 2 stabilityCSF(     t = 1,     df = df,     vars_cont = vars_cont,     vars_cat = vars_cat,     normal_estimate = normal_estimate,     weibull_estimate = weibull_estimate,     ndim = ndim ) #> Warning: Data is of class matrix. Coercing to dgCMatrix. #> Warning: Data is of class matrix. Coercing to dgCMatrix. #> Finding variable features for layer counts #> Warning: span too small.   fewer data values than degrees of freedom. #> Warning: at  -0.094261 #> Warning: radius  3.5942e-07 #> Warning: all data on boundary of neighborhood. make span bigger #> Warning: pseudoinverse used at -0.094261 #> Warning: neighborhood radius 0.00059952 #> Warning: reciprocal condition number  1 #> Warning: at  0.026841 #> Warning: radius  3.5942e-07 #> Warning: all data on boundary of neighborhood. make span bigger #> Warning: There are other near singularities as well. 3.5942e-07 #> Warning: zero-width neighborhood. make span bigger #> Warning: zero-width neighborhood. make span bigger #> Warning: zero-width neighborhood. make span bigger #> Warning: zero-width neighborhood. make span bigger #> Warning: zero-width neighborhood. make span bigger #> Centering and scaling data matrix #> Warning: You're computing too large a percentage of total singular values, use a standard svd instead. #> Warning: Only 4 dimensions have been computed. #> Warning: Requested number is larger than the number of available items (5). Setting to 5. #> Warning: Requested number is larger than the number of available items (5). Setting to 5. #> Warning: Requested number is larger than the number of available items (5). Setting to 5. #> Warning: Requested number is larger than the number of available items (5). Setting to 5. #> PC_ 1  #> Positive:  Feature1, Feature4  #> Negative:  Feature5, Feature2  #> PC_ 2  #> Positive:  Feature3, Feature1  #> Negative:  Feature4, Feature2  #> PC_ 3  #> Positive:  Feature5, Feature4  #> Negative:  Feature2, Feature1  #> PC_ 4  #> Positive:  Feature1, Feature5  #> Negative:  Feature3, Feature4  #> Computing nearest neighbor graph #> Computing SNN #> Finding variable features for layer counts #> Warning: span too small.   fewer data values than degrees of freedom. #> Warning: at  -0.10188 #> Warning: radius  3.6636e-07 #> Warning: all data on boundary of neighborhood. make span bigger #> Warning: pseudoinverse used at -0.10188 #> Warning: neighborhood radius 0.00060528 #> Warning: reciprocal condition number  1 #> Warning: at  0.020386 #> Warning: radius  3.6636e-07 #> Warning: all data on boundary of neighborhood. make span bigger #> Warning: There are other near singularities as well. 3.6636e-07 #> Warning: zero-width neighborhood. make span bigger #> Warning: zero-width neighborhood. make span bigger #> Warning: zero-width neighborhood. make span bigger #> Warning: zero-width neighborhood. make span bigger #> Warning: zero-width neighborhood. make span bigger #> Centering and scaling data matrix #> Warning: You're computing too large a percentage of total singular values, use a standard svd instead. #> Warning: Only 4 dimensions have been computed. #> Warning: Requested number is larger than the number of available items (5). Setting to 5. #> Warning: Requested number is larger than the number of available items (5). Setting to 5. #> Warning: Requested number is larger than the number of available items (5). Setting to 5. #> Warning: Requested number is larger than the number of available items (5). Setting to 5. #> PC_ 1  #> Positive:  Feature5, Feature1  #> Negative:  Feature2, Feature4  #> PC_ 2  #> Positive:  Feature3, Feature2  #> Negative:  Feature5, Feature1  #> PC_ 3  #> Positive:  Feature1, Feature2  #> Negative:  Feature5, Feature4  #> PC_ 4  #> Positive:  Feature2, Feature5  #> Negative:  Feature4, Feature3  #> Computing nearest neighbor graph #> Computing SNN #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2235 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.8000 #> Number of communities: 1 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2235 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.7310 #> Number of communities: 2 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2235 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.6837 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2235 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.6497 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2235 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.6156 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2235 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.5816 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2235 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.5476 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2235 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.5184 #> Number of communities: 4 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2235 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.4923 #> Number of communities: 4 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2235 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.4662 #> Number of communities: 4 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2235 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.4401 #> Number of communities: 4 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2333 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.8000 #> Number of communities: 1 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2333 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.7341 #> Number of communities: 2 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2333 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.6808 #> Number of communities: 2 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2333 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.6446 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2333 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.6111 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2333 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.5775 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2333 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.5440 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2333 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.5105 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2333 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.4770 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2333 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.4434 #> Number of communities: 3 #> Elapsed time: 0 seconds #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 100 #> Number of edges: 2333 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.4107 #> Number of communities: 4 #> Elapsed time: 0 seconds #> RNA_snn_res.0.2 RNA_snn_res.0.3 RNA_snn_res.0.4 RNA_snn_res.0.5 RNA_snn_res.0.6  #>      1.00000000     -0.02221258      0.01853562      0.07671761      0.07671761  #> RNA_snn_res.0.7 RNA_snn_res.0.8 RNA_snn_res.0.9   RNA_snn_res.1 RNA_snn_res.1.1  #>      0.07671761      0.07671761      0.07267415      0.07267415      0.07267415  #> RNA_snn_res.1.2  #>      0.07516240"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/timePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Plot — timePlot","title":"Time Plot — timePlot","text":"function creates time plot given variable data.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/timePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Plot — timePlot","text":"","code":"timePlot(data, var, size, span)"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/timePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Plot — timePlot","text":"data data frame containing data. var character string representing variable plotted. size numeric value representing size points plot. span numeric value representing span loess smoothing.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/timePlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time Plot — timePlot","text":"ggplot2 object representing time plot.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/timePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Plot — timePlot","text":"","code":"set.seed(1) data <- data.frame(     measure_time = seq(1, 100, by = 1),     var1 = rnorm(100),     var2 = rnorm(100) ) timePlot(data, var = \"var1\", size = 1, span = 0.5) #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/wilcox_akp_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Wilcoxon Test with AKP Effect Size (robust version of Cohen's d) — wilcox_akp_test","title":"Wilcoxon Test with AKP Effect Size (robust version of Cohen's d) — wilcox_akp_test","text":"Perform Wilcoxon test calculate Algina, Keselman, Penfield (AKP) effect size. robust version Cohen's d.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/wilcox_akp_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wilcoxon Test with AKP Effect Size (robust version of Cohen's d) — wilcox_akp_test","text":"","code":"wilcox_akp_test(data, var)"},{"path":"https://mihem.github.io/CSFAtlasTools/reference/wilcox_akp_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wilcoxon Test with AKP Effect Size (robust version of Cohen's d) — wilcox_akp_test","text":"data data frame containing variables test. var character string representing variable tested 'sex'.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/wilcox_akp_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wilcoxon Test with AKP Effect Size (robust version of Cohen's d) — wilcox_akp_test","text":"tidy data frame containing Wilcoxon test results AKP effect size.","code":""},{"path":"https://mihem.github.io/CSFAtlasTools/reference/wilcox_akp_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wilcoxon Test with AKP Effect Size (robust version of Cohen's d) — wilcox_akp_test","text":"","code":"df <- data.frame(   value = c(10.1, 20.3, 30.5, 40.7, 50.9, 60.1, 70.3, 80.5, 90.7, 100.9),   sex = c(\"M\", \"F\", \"M\", \"F\", \"M\", \"F\", \"M\", \"F\", \"M\", \"F\") ) wilcox_akp_test(df, var = \"value\") #> # A tibble: 1 × 5 #>   statistic p.value method                       alternative akp_effect #>       <dbl>   <dbl> <chr>                        <chr>            <dbl> #> 1        15   0.690 Wilcoxon rank sum exact test two.sided        0.318"}]
